# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: trace.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import dba_pb2 as dba__pb2
import common_pb2 as common__pb2
import syscall_pb2 as syscall__pb2
import libcall_pb2 as libcall__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='trace.proto',
  package='trace_format',
  syntax='proto2',
  serialized_pb=_b('\n\x0btrace.proto\x12\x0ctrace_format\x1a\tdba.proto\x1a\x0c\x63ommon.proto\x1a\rsyscall.proto\x1a\rlibcall.proto\"\xc0\x01\n\x08header_t\x12;\n\x0c\x61rchitecture\x18\x01 \x02(\x0e\x32%.trace_format.header_t.architecture_t\x12*\n\x0c\x61\x64\x64ress_size\x18\x02 \x02(\x0e\x32\x14.common.proto_size_t\x12$\n\x04kind\x18\x03 \x01(\x0e\x32\x11.common.ir_kind_t:\x03\x44\x42\x41\"%\n\x0e\x61rchitecture_t\x12\x07\n\x03X86\x10\x00\x12\n\n\x06X86_64\x10\x01\"\xeb\x02\n\nmetadata_t\x12:\n\x06typeid\x18\x01 \x02(\x0e\x32*.trace_format.metadata_t.typeid_metadata_t\x12\x19\n\x0fmodule_metadata\x18\x02 \x01(\tH\x00\x12\x42\n\x12\x65xception_metadata\x18\x03 \x01(\x0b\x32$.trace_format.metadata_t.exception_tH\x00\x12\x17\n\rwave_metadata\x18\x04 \x01(\rH\x00\x1a\x36\n\x0b\x65xception_t\x12\x16\n\x0etype_exception\x18\x01 \x02(\r\x12\x0f\n\x07handler\x18\x02 \x02(\x04\"]\n\x11typeid_metadata_t\x12\x14\n\x10INVALID_METADATA\x10\x00\x12\x12\n\x0e\x45XCEPTION_TYPE\x10\x01\x12\x0f\n\x0bMODULE_TYPE\x10\x02\x12\r\n\tWAVE_TYPE\x10\x03\x42\x12\n\x10metadata_content\"\xde\x04\n\x0eins_con_info_t\x12>\n\x06typeid\x18\x01 \x02(\x0e\x32..trace_format.ins_con_info_t.typeid_con_info_t\x12+\n\rread_register\x18\x02 \x01(\x0b\x32\x12.common.register_tH\x00\x12,\n\x0ewrite_register\x18\x03 \x01(\x0b\x32\x12.common.register_tH\x00\x12\'\n\x0bload_memory\x18\x04 \x01(\x0b\x32\x10.common.memory_tH\x00\x12(\n\x0cstore_memory\x18\x05 \x01(\x0b\x32\x10.common.memory_tH\x00\x12(\n\x04\x63\x61ll\x18\x06 \x01(\x0b\x32\x18.libcall_types.libcall_tH\x00\x12/\n\x0bsystem_call\x18\x08 \x01(\x0b\x32\x18.syscall_types.syscall_tH\x00\x12\x16\n\x0cnext_address\x18\t \x01(\x04H\x00\x12\x1a\n\x10reserved_comment\x18\n \x01(\tH\x00\x12\x0e\n\x04wave\x18\x0b \x01(\rH\x00\"\xa9\x01\n\x11typeid_con_info_t\x12\x0b\n\x07INVALID\x10\x00\x12\x0b\n\x07REGREAD\x10\x01\x12\x0c\n\x08REGWRITE\x10\x02\x12\x0b\n\x07MEMLOAD\x10\x03\x12\x0c\n\x08MEMSTORE\x10\x04\x12\x08\n\x04\x43\x41LL\x10\x05\x12\x0b\n\x07SYSCALL\x10\x06\x12\x11\n\rNOT_RETRIEVED\x10\x07\x12\x10\n\x0cNEXT_ADDRESS\x10\x08\x12\x0b\n\x07\x43OMMENT\x10\t\x12\x08\n\x04WAVE\x10\nB\x13\n\x11\x63onc_info_content\"\x9c\x01\n\rinstruction_t\x12\x11\n\tthread_id\x18\x01 \x02(\r\x12\x0f\n\x07\x61\x64\x64ress\x18\x02 \x02(\x04\x12\x0e\n\x06opcode\x18\x03 \x02(\x0c\x12\x34\n\x0e\x63oncrete_infos\x18\x04 \x03(\x0b\x32\x1c.trace_format.ins_con_info_t\x12!\n\ndba_instrs\x18\x05 \x01(\x0b\x32\r.dba.dba_list\"\xde\x01\n\x06\x62ody_t\x12\x32\n\x06typeid\x18\x01 \x02(\x0e\x32\".trace_format.body_t.typeid_body_t\x12,\n\x08metadata\x18\x02 \x01(\x0b\x32\x18.trace_format.metadata_tH\x00\x12\x32\n\x0binstruction\x18\x03 \x01(\x0b\x32\x1b.trace_format.instruction_tH\x00\".\n\rtypeid_body_t\x12\x0c\n\x08METADATA\x10\x00\x12\x0f\n\x0bINSTRUCTION\x10\x01\x42\x0e\n\x0c\x62ody_content\"-\n\x07\x63hunk_t\x12\"\n\x04\x62ody\x18\x01 \x03(\x0b\x32\x14.trace_format.body_t\"U\n\x07trace_t\x12&\n\x06header\x18\x01 \x02(\x0b\x32\x16.trace_format.header_t\x12\"\n\x04\x62ody\x18\x02 \x03(\x0b\x32\x14.trace_format.body_t')
  ,
  dependencies=[dba__pb2.DESCRIPTOR,common__pb2.DESCRIPTOR,syscall__pb2.DESCRIPTOR,libcall__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)



_HEADER_T_ARCHITECTURE_T = _descriptor.EnumDescriptor(
  name='architecture_t',
  full_name='trace_format.header_t.architecture_t',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='X86', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='X86_64', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=240,
  serialized_end=277,
)
_sym_db.RegisterEnumDescriptor(_HEADER_T_ARCHITECTURE_T)

_METADATA_T_TYPEID_METADATA_T = _descriptor.EnumDescriptor(
  name='typeid_metadata_t',
  full_name='trace_format.metadata_t.typeid_metadata_t',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='INVALID_METADATA', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='EXCEPTION_TYPE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MODULE_TYPE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='WAVE_TYPE', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=530,
  serialized_end=623,
)
_sym_db.RegisterEnumDescriptor(_METADATA_T_TYPEID_METADATA_T)

_INS_CON_INFO_T_TYPEID_CON_INFO_T = _descriptor.EnumDescriptor(
  name='typeid_con_info_t',
  full_name='trace_format.ins_con_info_t.typeid_con_info_t',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REGREAD', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REGWRITE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MEMLOAD', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MEMSTORE', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CALL', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SYSCALL', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_RETRIEVED', index=7, number=7,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NEXT_ADDRESS', index=8, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='COMMENT', index=9, number=9,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='WAVE', index=10, number=10,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1062,
  serialized_end=1231,
)
_sym_db.RegisterEnumDescriptor(_INS_CON_INFO_T_TYPEID_CON_INFO_T)

_BODY_T_TYPEID_BODY_T = _descriptor.EnumDescriptor(
  name='typeid_body_t',
  full_name='trace_format.body_t.typeid_body_t',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='METADATA', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INSTRUCTION', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1574,
  serialized_end=1620,
)
_sym_db.RegisterEnumDescriptor(_BODY_T_TYPEID_BODY_T)


_HEADER_T = _descriptor.Descriptor(
  name='header_t',
  full_name='trace_format.header_t',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='architecture', full_name='trace_format.header_t.architecture', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='address_size', full_name='trace_format.header_t.address_size', index=1,
      number=2, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='kind', full_name='trace_format.header_t.kind', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _HEADER_T_ARCHITECTURE_T,
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=85,
  serialized_end=277,
)


_METADATA_T_EXCEPTION_T = _descriptor.Descriptor(
  name='exception_t',
  full_name='trace_format.metadata_t.exception_t',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type_exception', full_name='trace_format.metadata_t.exception_t.type_exception', index=0,
      number=1, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='handler', full_name='trace_format.metadata_t.exception_t.handler', index=1,
      number=2, type=4, cpp_type=4, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=474,
  serialized_end=528,
)

_METADATA_T = _descriptor.Descriptor(
  name='metadata_t',
  full_name='trace_format.metadata_t',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='typeid', full_name='trace_format.metadata_t.typeid', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='module_metadata', full_name='trace_format.metadata_t.module_metadata', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='exception_metadata', full_name='trace_format.metadata_t.exception_metadata', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='wave_metadata', full_name='trace_format.metadata_t.wave_metadata', index=3,
      number=4, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_METADATA_T_EXCEPTION_T, ],
  enum_types=[
    _METADATA_T_TYPEID_METADATA_T,
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='metadata_content', full_name='trace_format.metadata_t.metadata_content',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=280,
  serialized_end=643,
)


_INS_CON_INFO_T = _descriptor.Descriptor(
  name='ins_con_info_t',
  full_name='trace_format.ins_con_info_t',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='typeid', full_name='trace_format.ins_con_info_t.typeid', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='read_register', full_name='trace_format.ins_con_info_t.read_register', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='write_register', full_name='trace_format.ins_con_info_t.write_register', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='load_memory', full_name='trace_format.ins_con_info_t.load_memory', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='store_memory', full_name='trace_format.ins_con_info_t.store_memory', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='call', full_name='trace_format.ins_con_info_t.call', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='system_call', full_name='trace_format.ins_con_info_t.system_call', index=6,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='next_address', full_name='trace_format.ins_con_info_t.next_address', index=7,
      number=9, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reserved_comment', full_name='trace_format.ins_con_info_t.reserved_comment', index=8,
      number=10, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='wave', full_name='trace_format.ins_con_info_t.wave', index=9,
      number=11, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _INS_CON_INFO_T_TYPEID_CON_INFO_T,
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='conc_info_content', full_name='trace_format.ins_con_info_t.conc_info_content',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=646,
  serialized_end=1252,
)


_INSTRUCTION_T = _descriptor.Descriptor(
  name='instruction_t',
  full_name='trace_format.instruction_t',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='thread_id', full_name='trace_format.instruction_t.thread_id', index=0,
      number=1, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='address', full_name='trace_format.instruction_t.address', index=1,
      number=2, type=4, cpp_type=4, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='opcode', full_name='trace_format.instruction_t.opcode', index=2,
      number=3, type=12, cpp_type=9, label=2,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='concrete_infos', full_name='trace_format.instruction_t.concrete_infos', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dba_instrs', full_name='trace_format.instruction_t.dba_instrs', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1255,
  serialized_end=1411,
)


_BODY_T = _descriptor.Descriptor(
  name='body_t',
  full_name='trace_format.body_t',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='typeid', full_name='trace_format.body_t.typeid', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='metadata', full_name='trace_format.body_t.metadata', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='instruction', full_name='trace_format.body_t.instruction', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _BODY_T_TYPEID_BODY_T,
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='body_content', full_name='trace_format.body_t.body_content',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1414,
  serialized_end=1636,
)


_CHUNK_T = _descriptor.Descriptor(
  name='chunk_t',
  full_name='trace_format.chunk_t',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='body', full_name='trace_format.chunk_t.body', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1638,
  serialized_end=1683,
)


_TRACE_T = _descriptor.Descriptor(
  name='trace_t',
  full_name='trace_format.trace_t',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='header', full_name='trace_format.trace_t.header', index=0,
      number=1, type=11, cpp_type=10, label=2,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='body', full_name='trace_format.trace_t.body', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1685,
  serialized_end=1770,
)

_HEADER_T.fields_by_name['architecture'].enum_type = _HEADER_T_ARCHITECTURE_T
_HEADER_T.fields_by_name['address_size'].enum_type = common__pb2._PROTO_SIZE_T
_HEADER_T.fields_by_name['kind'].enum_type = common__pb2._IR_KIND_T
_HEADER_T_ARCHITECTURE_T.containing_type = _HEADER_T
_METADATA_T_EXCEPTION_T.containing_type = _METADATA_T
_METADATA_T.fields_by_name['typeid'].enum_type = _METADATA_T_TYPEID_METADATA_T
_METADATA_T.fields_by_name['exception_metadata'].message_type = _METADATA_T_EXCEPTION_T
_METADATA_T_TYPEID_METADATA_T.containing_type = _METADATA_T
_METADATA_T.oneofs_by_name['metadata_content'].fields.append(
  _METADATA_T.fields_by_name['module_metadata'])
_METADATA_T.fields_by_name['module_metadata'].containing_oneof = _METADATA_T.oneofs_by_name['metadata_content']
_METADATA_T.oneofs_by_name['metadata_content'].fields.append(
  _METADATA_T.fields_by_name['exception_metadata'])
_METADATA_T.fields_by_name['exception_metadata'].containing_oneof = _METADATA_T.oneofs_by_name['metadata_content']
_METADATA_T.oneofs_by_name['metadata_content'].fields.append(
  _METADATA_T.fields_by_name['wave_metadata'])
_METADATA_T.fields_by_name['wave_metadata'].containing_oneof = _METADATA_T.oneofs_by_name['metadata_content']
_INS_CON_INFO_T.fields_by_name['typeid'].enum_type = _INS_CON_INFO_T_TYPEID_CON_INFO_T
_INS_CON_INFO_T.fields_by_name['read_register'].message_type = common__pb2._REGISTER_T
_INS_CON_INFO_T.fields_by_name['write_register'].message_type = common__pb2._REGISTER_T
_INS_CON_INFO_T.fields_by_name['load_memory'].message_type = common__pb2._MEMORY_T
_INS_CON_INFO_T.fields_by_name['store_memory'].message_type = common__pb2._MEMORY_T
_INS_CON_INFO_T.fields_by_name['call'].message_type = libcall__pb2._LIBCALL_T
_INS_CON_INFO_T.fields_by_name['system_call'].message_type = syscall__pb2._SYSCALL_T
_INS_CON_INFO_T_TYPEID_CON_INFO_T.containing_type = _INS_CON_INFO_T
_INS_CON_INFO_T.oneofs_by_name['conc_info_content'].fields.append(
  _INS_CON_INFO_T.fields_by_name['read_register'])
_INS_CON_INFO_T.fields_by_name['read_register'].containing_oneof = _INS_CON_INFO_T.oneofs_by_name['conc_info_content']
_INS_CON_INFO_T.oneofs_by_name['conc_info_content'].fields.append(
  _INS_CON_INFO_T.fields_by_name['write_register'])
_INS_CON_INFO_T.fields_by_name['write_register'].containing_oneof = _INS_CON_INFO_T.oneofs_by_name['conc_info_content']
_INS_CON_INFO_T.oneofs_by_name['conc_info_content'].fields.append(
  _INS_CON_INFO_T.fields_by_name['load_memory'])
_INS_CON_INFO_T.fields_by_name['load_memory'].containing_oneof = _INS_CON_INFO_T.oneofs_by_name['conc_info_content']
_INS_CON_INFO_T.oneofs_by_name['conc_info_content'].fields.append(
  _INS_CON_INFO_T.fields_by_name['store_memory'])
_INS_CON_INFO_T.fields_by_name['store_memory'].containing_oneof = _INS_CON_INFO_T.oneofs_by_name['conc_info_content']
_INS_CON_INFO_T.oneofs_by_name['conc_info_content'].fields.append(
  _INS_CON_INFO_T.fields_by_name['call'])
_INS_CON_INFO_T.fields_by_name['call'].containing_oneof = _INS_CON_INFO_T.oneofs_by_name['conc_info_content']
_INS_CON_INFO_T.oneofs_by_name['conc_info_content'].fields.append(
  _INS_CON_INFO_T.fields_by_name['system_call'])
_INS_CON_INFO_T.fields_by_name['system_call'].containing_oneof = _INS_CON_INFO_T.oneofs_by_name['conc_info_content']
_INS_CON_INFO_T.oneofs_by_name['conc_info_content'].fields.append(
  _INS_CON_INFO_T.fields_by_name['next_address'])
_INS_CON_INFO_T.fields_by_name['next_address'].containing_oneof = _INS_CON_INFO_T.oneofs_by_name['conc_info_content']
_INS_CON_INFO_T.oneofs_by_name['conc_info_content'].fields.append(
  _INS_CON_INFO_T.fields_by_name['reserved_comment'])
_INS_CON_INFO_T.fields_by_name['reserved_comment'].containing_oneof = _INS_CON_INFO_T.oneofs_by_name['conc_info_content']
_INS_CON_INFO_T.oneofs_by_name['conc_info_content'].fields.append(
  _INS_CON_INFO_T.fields_by_name['wave'])
_INS_CON_INFO_T.fields_by_name['wave'].containing_oneof = _INS_CON_INFO_T.oneofs_by_name['conc_info_content']
_INSTRUCTION_T.fields_by_name['concrete_infos'].message_type = _INS_CON_INFO_T
_INSTRUCTION_T.fields_by_name['dba_instrs'].message_type = dba__pb2._DBA_LIST
_BODY_T.fields_by_name['typeid'].enum_type = _BODY_T_TYPEID_BODY_T
_BODY_T.fields_by_name['metadata'].message_type = _METADATA_T
_BODY_T.fields_by_name['instruction'].message_type = _INSTRUCTION_T
_BODY_T_TYPEID_BODY_T.containing_type = _BODY_T
_BODY_T.oneofs_by_name['body_content'].fields.append(
  _BODY_T.fields_by_name['metadata'])
_BODY_T.fields_by_name['metadata'].containing_oneof = _BODY_T.oneofs_by_name['body_content']
_BODY_T.oneofs_by_name['body_content'].fields.append(
  _BODY_T.fields_by_name['instruction'])
_BODY_T.fields_by_name['instruction'].containing_oneof = _BODY_T.oneofs_by_name['body_content']
_CHUNK_T.fields_by_name['body'].message_type = _BODY_T
_TRACE_T.fields_by_name['header'].message_type = _HEADER_T
_TRACE_T.fields_by_name['body'].message_type = _BODY_T
DESCRIPTOR.message_types_by_name['header_t'] = _HEADER_T
DESCRIPTOR.message_types_by_name['metadata_t'] = _METADATA_T
DESCRIPTOR.message_types_by_name['ins_con_info_t'] = _INS_CON_INFO_T
DESCRIPTOR.message_types_by_name['instruction_t'] = _INSTRUCTION_T
DESCRIPTOR.message_types_by_name['body_t'] = _BODY_T
DESCRIPTOR.message_types_by_name['chunk_t'] = _CHUNK_T
DESCRIPTOR.message_types_by_name['trace_t'] = _TRACE_T

header_t = _reflection.GeneratedProtocolMessageType('header_t', (_message.Message,), dict(
  DESCRIPTOR = _HEADER_T,
  __module__ = 'trace_pb2'
  # @@protoc_insertion_point(class_scope:trace_format.header_t)
  ))
_sym_db.RegisterMessage(header_t)

metadata_t = _reflection.GeneratedProtocolMessageType('metadata_t', (_message.Message,), dict(

  exception_t = _reflection.GeneratedProtocolMessageType('exception_t', (_message.Message,), dict(
    DESCRIPTOR = _METADATA_T_EXCEPTION_T,
    __module__ = 'trace_pb2'
    # @@protoc_insertion_point(class_scope:trace_format.metadata_t.exception_t)
    ))
  ,
  DESCRIPTOR = _METADATA_T,
  __module__ = 'trace_pb2'
  # @@protoc_insertion_point(class_scope:trace_format.metadata_t)
  ))
_sym_db.RegisterMessage(metadata_t)
_sym_db.RegisterMessage(metadata_t.exception_t)

ins_con_info_t = _reflection.GeneratedProtocolMessageType('ins_con_info_t', (_message.Message,), dict(
  DESCRIPTOR = _INS_CON_INFO_T,
  __module__ = 'trace_pb2'
  # @@protoc_insertion_point(class_scope:trace_format.ins_con_info_t)
  ))
_sym_db.RegisterMessage(ins_con_info_t)

instruction_t = _reflection.GeneratedProtocolMessageType('instruction_t', (_message.Message,), dict(
  DESCRIPTOR = _INSTRUCTION_T,
  __module__ = 'trace_pb2'
  # @@protoc_insertion_point(class_scope:trace_format.instruction_t)
  ))
_sym_db.RegisterMessage(instruction_t)

body_t = _reflection.GeneratedProtocolMessageType('body_t', (_message.Message,), dict(
  DESCRIPTOR = _BODY_T,
  __module__ = 'trace_pb2'
  # @@protoc_insertion_point(class_scope:trace_format.body_t)
  ))
_sym_db.RegisterMessage(body_t)

chunk_t = _reflection.GeneratedProtocolMessageType('chunk_t', (_message.Message,), dict(
  DESCRIPTOR = _CHUNK_T,
  __module__ = 'trace_pb2'
  # @@protoc_insertion_point(class_scope:trace_format.chunk_t)
  ))
_sym_db.RegisterMessage(chunk_t)

trace_t = _reflection.GeneratedProtocolMessageType('trace_t', (_message.Message,), dict(
  DESCRIPTOR = _TRACE_T,
  __module__ = 'trace_pb2'
  # @@protoc_insertion_point(class_scope:trace_format.trace_t)
  ))
_sym_db.RegisterMessage(trace_t)


# @@protoc_insertion_point(module_scope)
